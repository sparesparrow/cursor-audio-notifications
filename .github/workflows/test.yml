name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CI: true
  NODE_ENV: test

jobs:
  test:
    name: Test (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
        node: [18.x]
        include:
          - os: ubuntu-22.04
            test-command: 'PULSE_SINK=dummy xvfb-run --auto-servernum npm test'
          - os: windows-latest
            test-command: 'npm test'
    runs-on: ${{ matrix.os }}
    
    services:
      xvfb:
        image: docker.io/xvfb
        ports: [":99"]
        options: >-
          --entrypoint sh
          -c "Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset & sleep 3"

    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'
        
    - name: Install system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2 libgbm1 libxcomposite1 libxcursor1 libxi6 libxtst6 libxss1 \
          libnss3 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libxkbcommon0 \
          libgtk-3-0 libpulse0 pulseaudio-utils
        
    - name: Configure audio
      if: runner.os == 'Linux'
      run: |
        pulseaudio -D --exit-idle-time=-1
        pacmd load-module module-virtual-sink sink_name=dummy
        pacmd set-default-sink dummy

    - run: npm ci
    - run: npm run compile
    
    - name: Run tests
      run: ${{ matrix.test-command }}
      env:
        DISPLAY: ':99.0'
        CODE_EXECUTABLE: ${{ runner.os == 'Windows' && 'C:\\Program Files\\Microsoft VS Code\\Code.exe' || '' }}

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          test-results/
          coverage/

  package:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18.x
        
    - run: npm ci
    - run: npm run build
    - run: npx vsce package --yarn
    
    - uses: actions/upload-artifact@v4
      with:
        name: extension-package
        path: '*.vsix'

  publish:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Package Extension
        run: |
          npm install -g @vscode/vsce
          vsce package

      - name: Upload VSIX
        uses: actions/upload-artifact@v4
        with:
          name: extension
          path: "*.vsix"

  publish-marketplace:
    needs: publish
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Download VSIX
        uses: actions/download-artifact@v4
        with:
          name: extension

      - name: Install VSCE
        run: npm install -g @vscode/vsce

      - name: Publish to Marketplace
        run: vsce publish -p ${{ secrets.VSCE_PAT }}
        continue-on-error: true 